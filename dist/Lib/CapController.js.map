{"version":3,"sources":["../../src/Lib/CapController.js"],"names":["React","matchPath","Utils","StoreManager","Loadable","Spinner","Log","Raise","Logger","CapController","props","_BreadCrumb","_SecurityProvider","_components","_urlMap","_theme","_layout","_view","_controllerName","constructor","name","_action","_viewPath","_errors","getMethods","obj","Object","getOwnPropertyNames","filter","item","loading","params","error","toString","pastDelay","renderView","view","data","loadmask","controller","controllerName","debug","View","loader","renderAjax","render","methods","action","method","f","toLocaleLowerCase","length","getUrlParams","addError","push","console","actionError","errors","map","e","paramString","match","location","pathname","path","exact","strict","assign","queryString","parse","search","init","c","a1","capitalizeFirstLetter","split","a","forEach","get","getComponent","isEmpty","urlMap","setItem","BreadCrumb","nextProps","info","value","Component","createUrl","actionName","hash","queryStringParams","has","id","stringify","startsWith","trimEnd","toUrl","window","toChange","history"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2019. Crypttech Yazılım\r\n * Author: Cihan Öztürk\r\n * Email: cihanozturk@crypttech.com\r\n */\r\n\r\n\r\nimport React from \"react\";\r\nimport {matchPath} from \"react-router\";\r\nimport Utils from \"./CAP/Utils/Utils\";\r\nimport StoreManager from \"./StoreManager\";\r\nimport {Loadable, Spinner, Log, Raise, Logger} from \"../index\";\r\n\r\n\r\n// const queryString = require(\"query-string\");\r\n\r\n\r\n/**\r\n * Kontroler Framework içerisinde sıkça kullanılan methodları tek bir yerde toplamak\r\n * ve kolay kullanım için geliştirilmiştir.\r\n *\r\n * Aslında react için bir kontroller sistemi yoktur  (01-10-2018)\r\n *\r\n * Geliştirilmesi gereken bir kaç yer var\r\n *\r\n * Component Güncelleme mekanizması kontrol altına alınmalı\r\n * Component unmount olduğunda yapılması gereken bir dizi işlem var , storeların temizlenmesi ramdaki gereksiz alanları temizlenmes vb..\r\n *\r\n *\r\n * ......\r\n */\r\nexport default class CapController extends React.Component {\r\n\r\n    _BreadCrumb = [];\r\n\r\n    /**\r\n     * Sistem genelinde kullanılabilmesi için Kontroller üzerinde tutuluyor.\r\n     *\r\n     * @SecurityProvider\r\n     *    local\r\n     *    ldap\r\n     *    activedirectory\r\n     *    radius\r\n     * @type {{}}\r\n     * @private\r\n     */\r\n    _SecurityProvider = 0;\r\n    /**\r\n     * Sistemde kullanılacak componenetleri listesi\r\n     * @type {{}}\r\n     * @private\r\n     */\r\n    _components = {};\r\n    /**\r\n     * Sistemde kullanılacak tema'yı belirliyor\r\n     * Tema aynı zamanda layout içerdiğinden tüm yapı düzen değişebilir.\r\n     * @comment\r\n     *    Tema oluşturulurken aşağıdaki hiyerarşi oluşturulmalı\r\n     *      /Themes\r\n     *        /Default\r\n     *          /Views\r\n     *            /{Component}/\r\n     *            /{Component2}/\r\n     *            ..\r\n     *            MainView.js\r\n     *            LoginView.js\r\n     *            ForgetPassword.js\r\n     *          /Widget\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    _urlMap = []; //TODO burası kullanılacak\r\n    _theme = \"Default\";\r\n    _layout = \"Layout\";//TODO bu kaldırılabilir kontrol dilmesi gerekiyor\r\n    _view = \"index\";  //TODO bu aktif olarak kullanılmıyor gerekli ayarlar yapılırsa render işleminde view parametresi verilmeden kullanmak için\r\n    _controllerName = this.constructor.name;\r\n    /**\r\n     * Her kontroller içinde olması gereken aksiyon\r\n     * Aksiyon isimlendirme\r\n     *  @comment\r\n     *  Action lar 'action' ile başlamalı sonrasında gelen ilk karkater büyük harf olmalı\r\n     *    actionList\r\n     *    actionDelete\r\n     *    actionIndex\r\n     *    ...\r\n     *\r\n     *    Şimdilik alt level bir aksiyon islemi yapılmak isteniyorsa leveller arasına \"-\" konmali\r\n     *\r\n     *    Örnek : http://local/Manager/Customer-Order-List şeklinde bir url miz var bunu parçalarsak\r\n     *\r\n     *    Manager => Kontroller\r\n     *    Customer-Order-List => Aksiyon ( Customer/Order/List şeklinde'de ifade edebiliriz)\r\n     *\r\n     *    Bu controler şu şekilde olmalı\r\n     *\r\n     *    export default Manager extent CapController{\r\n   *\r\n   *      actionCustomerOrderList(){\r\n   *        ....\r\n   *      }\r\n   *\r\n   *      ....\r\n   *    }\r\n     *\r\n     *\r\n     *  <p>Her aksiyon içinde kesinlikle return olmalı</p>\r\n     *\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    _action = \"actionIndex\";\r\n    /**\r\n     * Tema path belirleme için kullanılıyor,\r\n     *\r\n     * _theme değeri kullanılıyor, ancak bu değer Envoriment ile değiştirilebilir.\r\n     *\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    _viewPath = null;\r\n    /**\r\n     * Kontroller işlenirken oluşan hataları depolayacak.\r\n     * @type {Array}\r\n     * @private\r\n     */\r\n    _errors = [];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.init();\r\n\r\n    }\r\n\r\n\r\n    getMethods = (obj) => Object.getOwnPropertyNames(obj).filter(item => typeof obj[item] === 'function');\r\n    loading = (params) => {\r\n        if (params.error) {\r\n            Log(\"Loading Error:\", params.error);\r\n            return <React.Fragment>\r\n                <div className=\"text-white bg-danger text-center\">\r\n                    <div className={\"cart card-error p-4\"}>\r\n                        <blockquote className=\"card-bodyquote\">\r\n                            <p>{params.error.toString()}</p>\r\n                        </blockquote>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>;\r\n        } else if (params.pastDelay) {\r\n            return <Spinner/>;\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    init() {\r\n\r\n\r\n        // let type = this.props.location.pathname.split('/'); //this is the name of the route\r\n        let c = this.props.match.params.controller || \"Default\";\r\n        // let m = this.props.match.params.module || null ;\r\n        let a1 = (this.props.match.params.action || \"Index\").capitalizeFirstLetter().split(\"-\");\r\n        let a = \"\";\r\n        a1.forEach(e => {\r\n            a += e.capitalizeFirstLetter();\r\n        });\r\n\r\n        // CAP.Log(this.props.match.params)\r\n\r\n\r\n        this._action = a;\r\n        this._controllerName = c;\r\n        this._components = StoreManager.get(\"CommonStore\").getComponent(c);\r\n        // let match = null;\r\n        if (!Utils.isEmpty(this.urlMap)) {\r\n\r\n            //\r\n            //   match = matchPath(this.urlMap, {\r\n            //     path: this._urlMap,\r\n            //     exact: true,\r\n            //     strict: false\r\n            //   });\r\n            //\r\n            //\r\n        }\r\n\r\n\r\n        // if (this.viewPath == null)\r\n        //   this.viewPath = this._theme + \"/Views/\" + this._controllerName + \"/\";\r\n\r\n\r\n    }\r\n\r\n\r\n    get BreadCrumb() {\r\n        return this._BreadCrumb;\r\n    }\r\n\r\n    set BreadCrumb(value) {\r\n        this._BreadCrumb = value;\r\n    }\r\n\r\n    get SecurityProvider() {\r\n        return this._SecurityProvider;\r\n    }\r\n\r\n    set SecurityProvider(value) {\r\n        this._SecurityProvider = value;\r\n    }\r\n\r\n    get theme() {\r\n        return this._theme;\r\n    }\r\n\r\n    set theme(value) {\r\n        this._theme = value;\r\n    }\r\n\r\n\r\n    get view() {\r\n        return this._view;\r\n    }\r\n\r\n    set view(value) {\r\n        this._view = value;\r\n    }\r\n\r\n    get controllerName() {\r\n        return this._controllerName;\r\n    }\r\n\r\n    set controllerName(value) {\r\n        this._controllerName = value;\r\n    }\r\n\r\n\r\n    get action() {\r\n        return this._action;\r\n    }\r\n\r\n    set action(value) {\r\n        this._action = value;\r\n    }\r\n\r\n\r\n    get urlMap() {\r\n        return this._urlMap;\r\n    }\r\n\r\n    set urlMap(value) {\r\n        this._urlMap = value;\r\n    }\r\n\r\n    get viewPath() {\r\n        return this._viewPath;\r\n    }\r\n\r\n    set viewPath(value) {\r\n        this._viewPath = value;\r\n    }\r\n\r\n\r\n    get layout() {\r\n        return this._layout;\r\n    }\r\n\r\n    set layout(value) {\r\n        this._layout = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * İlgili komponent\r\n     * @returns {{}}\r\n     */\r\n    get components() {\r\n        return this._components;\r\n    }\r\n\r\n    set components(value) {\r\n        this._components = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * kontroller da oluşan hatalar\r\n     * @returns {Array}\r\n     */\r\n    get errors() {\r\n        return this._errors;\r\n    }\r\n\r\n    set errors(value) {\r\n        this._errors.push(value);\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        //TODO mount olunca neler yapılmalı bunlar belilenmeli\r\n        //BreadCrumb\r\n        StoreManager.get(\"BreadCrumbStore\").setItem(this.BreadCrumb);\r\n\r\n\r\n        //console.log(this.getMethods(this));\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    // componentWillUpdate(nextProps, nextState) {\r\n    //     // Logger.debug(\"Controller Update NextProps \", nextProps, this.props)\r\n    //     return nextProps != this.props;\r\n    // }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        Logger.error(\"MyCatch\", error, info)\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     ### About `shouldComponentUpdate`\r\n\r\n     When using `@observer` on a component, don't implement `shouldComponentUpdate`, as it will override the default implementation that MobX provides.\r\n     When using mobx-react, you should in general not need to write an `sCU` (in our entire Mendix code base we have none). If you really need to implement `sCU`, split the component into two, a reactive and non-reactive (with the `sCU`) part, or use `<Observer>` sections instead of `observer` on the entire component.\r\n\r\n     Similarly, `PureComponent` should not be combined with `observer`. As pure components are supposed to be dumb and never update themselves automatically, but only by getting passed in new props from the parent. `observer` is the opposite, it makes components smart and dependency aware, allowing them to update without the parents even needing to be aware of the change.\r\n\r\n     ### `componentWillReact` (lifecycle hook)\r\n\r\n     React components usually render on a fresh stack, so that makes it often hard to figure out what _caused_ a component to re-render.\r\n     When using `mobx-react` you can define a new life cycle hook, `componentWillReact` (pun intended) that will be triggered when a component is scheduled to be re-rendered because\r\n     data it observes has changed. This makes it easy to trace renders back to the action that caused the rendering.\r\n\r\n     ```javascript\r\n     import { observer } from \"mobx-react\"\r\n\r\n     @observer\r\n     class TodoView extends React.Component {\r\n      componentWillReact() {\r\n          console.info(\"I will re-render, since the todo has changed!\")\r\n      }\r\n\r\n      render() {\r\n          return <div>{this.props.todo.title}</div>\r\n      }\r\n  }\r\n     ```\r\n\r\n     *   `componentWillReact` doesn't take arguments\r\n     *   `componentWillReact` won't fire before the initial render (use `componentDidMount` or `constructor` instead)\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n\r\n    componentWillReact() {\r\n        Logger.debug(\"Store Change\")\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param view\r\n     * @param data\r\n     * @returns {*}\r\n     */\r\n\r\n    renderView = (view, data = {}, loadmask = false, controller = this.controllerName) => {\r\n        //\r\n        // let viewPath = this.viewPath;\r\n        // let theme = this.theme;\r\n        // let layout = this.layout;\r\n\r\n\r\n        Logger.debug(`@ThemeViewsPath/${controller}/${view}`);\r\n        if (!loadmask) {\r\n\r\n            let View = Loadable({\r\n                loader: () => import(\r\n                    /* webpackMode: \"lazy\" */\r\n                    `@ThemeViewsPath/${controller}/${view}`),\r\n                loading: this.loading\r\n\r\n            });\r\n\r\n            Logger.debug(`@ThemeViewsPath/${controller}/${view}`);\r\n\r\n            return (<View {...data} {...this.props} Controller={this}/>);\r\n        } else {\r\n            return <Spinner/>;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ajax ile gelen view render edebilmek için\r\n     *\r\n     * @comment\r\n     * Dinamik şekilde oluşturulan component'ler için ReactDOMServer kullanılmalı\r\n     *\r\n     *\r\n     *\r\n     * @Kaynak https://reactjs.org/docs/react-dom-server.html\r\n     * @example https://github.com/mhart/react-server-example\r\n     * @example https://camjackson.net/post/server-side-rendering-with-react\r\n     * @example https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67\r\n     *\r\n     * server.js\r\n     * -------------------------------\r\n     *   const React = require('react');\r\n     **   const ReactDomServer = require('react-dom/server');\r\n     *   const PostComponent = require('./components/PostComponent');\r\n\r\n     *   app.get('/post/:slug', (req, res) => {\r\n   *    const relevantPost = getPostFromDatabase(req.params.slug);\r\n   *    const html = ReactDOMServer.renderToStaticMarkup(<PostComponent post={relevantPost}/>);\r\n   *    res.send(html);\r\n   *  });\r\n     *\r\n     *  postcomponent.js\r\n     *  -------------------------------\r\n     *   const React = require('react');\r\n     *   const moment = require('moment');\r\n     *   const Page = require('./page');\r\n\r\n     *   const PostComponent = (props) => (\r\n     *     <Page>\r\n     *     <article className=\"container post\">\r\n     *     <h1>{props.post.title}</h1>\r\n     *     <time pubdate className=\"pull-right\">\r\n     *     <em>{moment(props.post.posted).format('Do MMMM YYYY')}</em>\r\n     *     </time>\r\n     *     <hr/>\r\n     *     <div>{props.post.text}</div>\r\n     *     </article>\r\n     *     </Page>\r\n     *   );\r\n     *   module.exports = PostComponent;\r\n     *\r\n     *  app.js\r\n     *  -------------------------------------\r\n     *   const React = require('react');\r\n     *   const Head = require('./head');\r\n     *   const NavBar = require('./navBar');\r\n     *   const Footer = require('./footer');\r\n\r\n     *   const Page = (props) => (\r\n     *   <html>\r\n     *     <Head/>\r\n     *       <body>\r\n     *       <div id=\"container\">\r\n     *       <NavBar/>\r\n     *       <main>\r\n     *          {props.children}\r\n     *       </main>\r\n     *       <Footer/>\r\n     *       </div>\r\n     *     </body>\r\n     *   </html>\r\n     *   );\r\n     *   module.exports = Page;\r\n     *\r\n     * @param view\r\n     * @param data\r\n     * @param loadmask\r\n     * @param controller\r\n     */\r\n    renderAjax = (view, data = {}, loadmask = false, controller = this.controllerName) => {\r\n\r\n        /*var xhr = new XMLHttpRequest();\r\n        xhr.open(\"get\", this.props.url, true);\r\n        xhr.onload = function() {\r\n          var response = JSON.parse(xhr.responseText);\r\n\r\n          this.setState({ data: response.result });\r\n        }.bind(this);\r\n        xhr.send();*/\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {*}\r\n     */\r\n    render = () => {\r\n\r\n        let methods = this.getMethods(this);\r\n        Logger.debug(\"Controller Find action\", this.controllerName + \"/\" + this.action)\r\n        let method = methods.filter(f => f.toLocaleLowerCase() == \"action\" + this.action.toLocaleLowerCase());\r\n        if (method.length > 0) {\r\n            return this[method[0]]({...this.getUrlParams()});\r\n        } else {\r\n            return this.renderView(\"Page404\", {action: this.action}, false, \"Default\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    addError = (error) => {\r\n        this._errors.push(error);\r\n        console.error(error);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param errorCode\r\n     * @param errorText\r\n     * @returns {*}\r\n     */\r\n    actionError = (params) => {\r\n\r\n\r\n        return <React.Fragment>\r\n            <div className=\"text-white bg-danger text-center\">\r\n                <div className={\"cart card-error p-4\"}>\r\n                    <blockquote className=\"card-bodyquote\">\r\n                        {params.errors ? <p>{params.errors}</p> : \"\"}\r\n                        <p>{this.errors.map(e => {\r\n                            return e;\r\n                        })}</p>\r\n                    </blockquote>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>;\r\n\r\n    }\r\n\r\n    /**\r\n     * get all url parameters\r\n     * @returns {*}\r\n     */\r\n    getUrlParams = (paramString = \":id?\") => {\r\n\r\n        const match = matchPath(this.props.location.pathname, {\r\n            path: this.props.match.path + paramString,\r\n            exact: true,\r\n            strict: false\r\n        }) || {};\r\n\r\n        // let params = this.props.match.params || {};\r\n        let params = match.params || {};\r\n        return Object.assign(params, Utils.queryString.parse(this.props.location.search));\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param actionName\r\n     * @param params\r\n     * @returns {string}\r\n     */\r\n\r\n    static createUrl = (actionName, params = {}, hash = true) => {\r\n\r\n\r\n        // return <Link\r\n        //     to={{\r\n        //         pathname: actionName,\r\n        //         search:  params,\r\n        //         // hash: \"#the-hash\"\r\n        //     }}\r\n        // />;\r\n        let queryStringParams = \"\";\r\n        if (!Utils.isEmpty(params)) {\r\n            if (Utils.has(params, \"id\") && !Utils.isEmpty(params.id)) {\r\n                queryStringParams = params.id;\r\n                delete params.id;\r\n            }\r\n        }\r\n\r\n        if (!Utils.isEmpty(params))\r\n            queryStringParams = queryStringParams + \"/?\" + Utils.queryString.stringify(params);\r\n\r\n        let controller = \"/\" + this.controllerName + \"/\" + actionName;\r\n\r\n        if (Utils.startsWith(actionName, \"/\")) controller = actionName;\r\n\r\n        if (hash)\r\n            return \"/#\" + Utils.trimEnd(controller, \"/\") + \"/\" + queryStringParams;\r\n        else\r\n            return Utils.trimEnd(controller, \"/\") + (Utils.startsWith(queryStringParams, \"/\") ? queryStringParams : \"/\" + queryStringParams);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param actionName\r\n     * @param params\r\n     * @returns {*}\r\n     */\r\n    static toUrl = (actionName, params = {}) => {\r\n        return window.location = this.createUrl(actionName, params);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param actionName\r\n     * @param params\r\n     * @returns {*}\r\n     */\r\n    static toChange = (actionName, params = {}) => {\r\n        return this.props.history.push(this.createUrl(actionName, params, false));\r\n    }\r\n}"],"file":"CapController.js"}