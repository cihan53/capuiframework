{"version":3,"sources":["../../../../src/Lib/CAP/Utils/Validator.js"],"names":["Utils","SimpleReactValidator","customValid","className","validators","empty","message","rule","val","options","isEmpty","each","length","v","filter","r","eval","window","CAP","toJSON","date","params","Date","parse","isNaN","alpha_num","validator","helpers","testRegex","password","boolean","indexOf","toString","ip","ip2","validate","require","isIp","confrim","confrimVal","document","querySelector","value","Validator"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2019. Crypttech Yazılım\r\n * Author: Cihan Öztürk\r\n * Email: cihanozturk@crypttech.com\r\n */\r\n\r\nimport Utils from \"./Utils\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\n\r\nlet customValid = {\r\n    className: \"text-danger\",\r\n    // element: (message, className) => <div className={className}>{message}</div>,\r\n    validators: {\r\n        empty: { // name the rule\r\n            message: \"The :attribute must be a valid value.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n            rule: function (val, options) {\r\n                return !Utils.isEmpty(val);\r\n            }\r\n        },\r\n        each: { // name the rule\r\n            message: \"The :attribute must be a valid value.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n            rule: function (val, options) {\r\n                if (val.length == 0) return true;\r\n                let v = val.filter(function (r) {\r\n                    return eval(options[0] + \"(\" + window.CAP.Utils.toJSON(r) + \")\");\r\n                });\r\n                return v.length > 0;\r\n            }\r\n        },\r\n        date: { // name the rule\r\n            message: \"The :attribute must be a valid value.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n            rule: function (val, params) {\r\n\r\n                let date = Date.parse(val);\r\n                return !isNaN(date) ? new Date(date) : null;\r\n            }\r\n        },\r\n\r\n        alpha_num: { // name the rule\r\n            message: \"The :attribute may only contain letters and numbers.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n            rule: function (val, params, validator) {\r\n                return validator.helpers.testRegex(val, /^[A-Za-z0-9]*$/);\r\n            }\r\n        },\r\n        // alpha_num_dash_space: { // name the rule\r\n        //     message: \"The :attribute must be a valid value.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n        //     rule: function (val, params, validator) {\r\n        //         return validator.helpers.testRegex(val, /^[A-Z0-9_\\-\\s.,]*$/i);\r\n        //     }\r\n        // },\r\n        // string: { // name the rule\r\n        //     message: \"The :attribute must be a valid value.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n        //     rule: function (val, params, validator) {\r\n        //         return validator.helpers.testRegex(val, /^[\\w'\\-_,.0-9][^!¡?÷?¿/\\\\+=@#$%ˆ&*(){}|~<>;:[\\]]{2,}$/i);\r\n        //     }\r\n        // },\r\n        password: { // name the rule\r\n            message: \"The :attribute must be a valid value.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n            rule: function (val, params, validator) {\r\n\r\n                if (val == \"\") return true;\r\n                //if( this.fields )\r\n                return validator.helpers.testRegex(val, /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&]{8,10}/);\r\n            }\r\n        },\r\n        boolean: { // name the rule\r\n            message: \"The :attribute must be a valid value.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n            rule: function (val) {\r\n                return ([\"true\", \"false\", \"1\", \"0\"].indexOf(val.toString()) >= 0);\r\n            }\r\n        },\r\n        ip: { // name the rule\r\n            message: \"The :attribute must be a valid IP address.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n            rule: function (val, options, validator) { // return true if it is succeeds and false it if fails validation. the _testRegex method is available to give back a true/false for the regex and given value\r\n                // check that it is a valid IP address and is not blacklisted\r\n                return validator.helpers.testRegex(val, /^(?!0)(?!.*\\.$)((1?\\d?\\d|25[0-5]|2[0-4]\\d)(\\.|$)){4}$/i) && options.indexOf(val) === -1;\r\n            }\r\n        },\r\n        ip2: { // name the rule\r\n            message: \"The :attribute must be a valid IP address.\", // give a message that will display when there is an error. :attribute will be replaced by the name you supply in calling it.\r\n            rule: function (val, options, validator) { // return true if it is succeeds and false it if fails validation. the _testRegex method is available to give back a true/false for the regex and given value\r\n                // check that it is a valid IP address and is not blacklisted\r\n                var validate = require(\"ip-subnet-calculator\");\r\n\r\n                if (val == \"\") return true;\r\n\r\n                return validate.isIp(val);  // validator.helpers.testRegex(val,/^(?!0)(?!.*\\.$)((1?\\d?\\d|25[0-5]|2[0-4]\\d)(\\.|$)){4}$/i) && options.indexOf(val) === -1\r\n            }\r\n        },\r\n\r\n        confrim: { // name the rule\r\n            message: \":attribute veriler eşleşmiyor. \",\r\n            rule: function (val, options, validator) {\r\n                let confrimVal = document.querySelector(\"[name='\" + options[0] + \"']\").value;\r\n                return confrimVal == val;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst Validator = new SimpleReactValidator(customValid);\r\nexport default Validator;"],"file":"Validator.js"}