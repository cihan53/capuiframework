{"version":3,"sources":["../../../../src/Lib/CAP/Data/ElasticSql.js"],"names":["action","observable","toJS","Ajax","Utils","DataProxy","ElasticSql","_baseUrl","currentId","running","_limit","_from","_maps","_start","_fetch","_sqlText","_whereText","_mainTable","process","env","REACT_APP_DEFAULT_INDEX","_groupBy","_debug","tokenPlugin","req","handleErrors","err","res","responseBody","body","abort","isEmpty","init","regenerateQuery","_type","dataProxy","createProxy","bind","_select","_joins","_where","_orderBy","mainTable","where","selectArr","type","table","on","push","order","limits","orderBy","groupBy","from","param","logic","isArray","index","item","isString","operator","CAP","forEach","subsetItem","conditions","trim","join","groupStr","substr","length","orderStr","sql","newSql","build","isRunning","params","parameters","Object","assign","dashboardType","query","Promise","resolve","reject","__t","console","debug","post","then","data","hasOwnProperty","ErrorText","error","root_cause","map","e","reason","catch","response","errors","finally","execute","_Request","value","trimStart"],"mappings":"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","sourcesContent":["/*\r\n *  Copyright (c) 2019. Crypttech Yazılım\r\n *  Author: Cihan Öztürk\r\n *  Email: cihanozturk@crypttech.com\r\n *\r\n *\r\n */\r\n\r\nimport {action, observable, toJS} from \"mobx\";\r\nimport Ajax from \"./Ajax\";\r\nimport Utils from \"../Utils/Utils\";\r\nimport DataProxy from \"./DataProxy\";\r\n\r\nexport default class ElasticSql {\r\n    _baseUrl = \"\";\r\n    currentId = 0;\r\n    running = null;\r\n    Ajax = null;\r\n    @observable _select = [];\r\n    @observable _joins = [];\r\n    _limit = 50;\r\n    _from = \"\";\r\n    _maps = {};\r\n    _start = 0;\r\n    _fetch = 0;\r\n    _sqlText = \"\";\r\n    _whereText = \"\";\r\n    _mainTable = process.env.REACT_APP_DEFAULT_INDEX || \"eventdata-prod\";\r\n    @observable _where = null;\r\n    @observable _orderBy = null;\r\n    _groupBy = null;\r\n    _debug = false;\r\n\r\n    @observable isRunning = false;\r\n\r\n    tokenPlugin = (req) => {\r\n\r\n    }\r\n\r\n    handleErrors = (err, res) => {\r\n\r\n    }\r\n\r\n    responseBody = (res) => {\r\n        return res.body;\r\n    }\r\n\r\n    constructor() {\r\n        this._type = 'elasticsql';\r\n        this.dataProxy = new DataProxy();\r\n        this.Ajax = this.dataProxy.createProxy('ajax');\r\n        // this.oldEnd = superagent.prototype.end;\r\n        this.init = this.init.bind(this);\r\n\r\n    }\r\n\r\n    static _uniqueIdGenerator() {\r\n        return ++this.currentId;\r\n    }\r\n\r\n    get Request() {\r\n        return this._Request;\r\n    }\r\n\r\n    set Request(value) {\r\n        this._Request = value;\r\n    }\r\n\r\n\r\n    get baseUrl() {\r\n        return this._baseUrl;\r\n    }\r\n\r\n    set baseUrl(value) {\r\n        this._baseUrl = value;\r\n    }\r\n\r\n    /**\r\n     * işlemi kes\r\n     */\r\n    abort = () => {\r\n        if (!Utils.isEmpty(this.Ajax.running))\r\n            this.Ajax.running.abort();\r\n    }\r\n\r\n    init = () => {\r\n        this.regenerateQuery();\r\n    };\r\n\r\n    regenerateQuery() {\r\n        this._select = [];\r\n        this._joins = [];\r\n        this._from = [];\r\n        this._limit = null;\r\n        this._start = 0;\r\n        this._fetch = 0;\r\n        this._sqlText = \"\";\r\n        this._mainTable = process.env.REACT_APP_DEFAULT_INDEX || \"eventdata-prod\";\r\n        this._where = null;\r\n        this._orderBy = null;\r\n        this._groupBy = null;\r\n    }\r\n\r\n    get table() {\r\n        return this._mainTable;\r\n    }\r\n\r\n    get wheres() {\r\n        return toJS(this._where);\r\n    }\r\n\r\n    get whereText() {\r\n        return Utils.trimStart(this._whereText.trim(), 'and');\r\n    }\r\n\r\n    mainTable(mainTable) {\r\n        this._mainTable = mainTable;\r\n        return this;\r\n    }\r\n\r\n    where(where) {\r\n        this._where = where;\r\n        return this;\r\n    }\r\n\r\n    addWhere(where) {\r\n        // this._where += where;\r\n        return this;\r\n    }\r\n\r\n    select(selectArr = []) {\r\n        this.regenerateQuery();\r\n        this._select = selectArr;\r\n        return this;\r\n    }\r\n\r\n    join(type = \"\", table = \"\", on = []) {\r\n        this._joins.push({\"type\": type, \"table\": table, \"on\": on});\r\n        return this;\r\n    }\r\n\r\n    order(order = []) {\r\n        this.order = order;\r\n        return this;\r\n    }\r\n\r\n\r\n    limits(limits = null) {\r\n        this._limit = limits;\r\n        return this;\r\n    }\r\n\r\n    orderBy(orderBy) {\r\n        this._orderBy = orderBy;\r\n        return this;\r\n    }\r\n\r\n    groupBy(groupBy) {\r\n        this._groupBy = groupBy;\r\n        return this;\r\n    }\r\n\r\n    from(from) {\r\n        this._mainTable = from;\r\n        return this;\r\n    }\r\n\r\n\r\n    conditions(param, logic = \"and\") {\r\n\r\n        if (Utils.isArray(param)) {\r\n            /**\r\n             * Eğer arary ise bütün itemları gez\r\n             */\r\n            for (let index in param) {\r\n                let item = param[index];\r\n\r\n                //eğer item string ise\r\n                if (Utils.isString(item)) {\r\n                    this._whereText += \" \" + logic + \" \" + item;\r\n                } else {\r\n\r\n                    let operator = \"=\";\r\n\r\n                    //Alt query var ise\r\n                    if (item[\"type\"]) {\r\n                        if (item[\"type\"] == \"subset\") {\r\n                            if (item[\"items\"]) {\r\n                                if (CAP.Utils.isArray(item[\"items\"])) {\r\n                                    this._whereText += \" \" + logic + \" ( 1=1  \";\r\n                                    item[\"items\"].forEach((subsetItem) => {\r\n                                        this.conditions(subsetItem, \"or\");\r\n                                    });\r\n                                    this._whereText += \")\";\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //operator var ise\r\n                    if (item[\"operator\"]) {\r\n                        operator = item[\"operator\"];\r\n                    }\r\n\r\n                    if (operator.trim() == \"in\" || operator.trim() == \"is\" || operator.trim() == \"between\") {\r\n                        this._whereText += \" \" + logic + \" \" + item[\"column\"] + \" \" + operator + \" \" + item[\"value\"] + \" \";\r\n                    } else {\r\n                        this._whereText += \" \" + logic + \" \" + item[\"column\"] + \" \" + operator + \"'\" + item[\"value\"] + \"'\";\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        } else if (Utils.isString(param) && !CAP.Utils.isEmpty(param)) {\r\n            /**\r\n             * string bir değer var ise param içinde\r\n             * @type {string}\r\n             * @private\r\n             */\r\n            this._whereText += \" \" + logic + \" \" + param;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    build() {\r\n        this._sqlText = \"\";\r\n        this._whereText = \"\";\r\n        this._sqlText += \"select \" + this._select.join(\", \");\r\n        this._sqlText += \" from \" + this._mainTable;\r\n\r\n\r\n        this._joins.forEach((item) => {\r\n            this._sqlText += \" \" + item[\"type\"] +\r\n                \" join \" + item[\"table\"] +\r\n                \" on \" + item[\"on\"].join(\" and \");\r\n        });\r\n\r\n        //where block\r\n        if (this._where != \"\") {\r\n            this.conditions(this._where);\r\n            this._sqlText += \" where 1=1 \" + this._whereText;\r\n        }\r\n\r\n        //groupBy block\r\n        if (this._groupBy) {\r\n            let groupStr = \" group by \";\r\n            this._groupBy.forEach((item) => {\r\n                groupStr += item + \",\";\r\n            });\r\n            groupStr = groupStr.substr(0, groupStr.length - 1);\r\n            this._sqlText += groupStr;\r\n        }\r\n\r\n        //orderBy block\r\n        if (this._orderBy) {\r\n            if (!Utils.isArray(this._orderBy)) {\r\n                this._orderBy = [this._orderBy];\r\n            }\r\n            let orderStr = \" order by \";\r\n            this._orderBy.forEach((item) => {\r\n                orderStr += item[\"field\"] + \" \" + item[\"dir\"] + \",\";\r\n            });\r\n\r\n            orderStr = orderStr.substr(0, orderStr.length - 1);\r\n            this._sqlText += orderStr;\r\n        }\r\n        // limits\r\n        if (this._limit) {\r\n            this._sqlText += \" limit \" + this._limit[\"start\"] + \",\" + this._limit[\"limit\"];\r\n        }\r\n        return this._sqlText;\r\n    }\r\n\r\n    @action\r\n    execute(sql = null) {\r\n        let newSql = sql || this.build();\r\n\r\n        this.isRunning = true;\r\n\r\n        var params = {\r\n            parameters: Object.assign({\r\n                dashboardType: \"GenericElasticSearch\"\r\n            }, {query: newSql})\r\n        };\r\n\r\n\r\n        if (Utils.isEmpty(newSql)) return new Promise((resolve, reject) => {\r\n            reject(Utils.__t(\"Hatalı sorgu. Sorgu Boş olamaz\"))\r\n        });\r\n\r\n        console.debug(\"Run Elastic SQL:\", newSql);\r\n        let post = this.Ajax.post(this._baseUrl, params);\r\n\r\n\r\n        return post.then(action((res) => {\r\n            if (res && res.data.hasOwnProperty(\"error\")) {\r\n                this.ErrorText = res.data.error.root_cause.map(e => {\r\n                    return e.reason + \" \";\r\n                });\r\n                throw this.ErrorText;\r\n            }\r\n            return res;\r\n        }))\r\n            .catch(action((err) => {\r\n                this.ErrorText = err.response && err.response.body && err.response.body.errors;\r\n                throw err;\r\n            })).finally(e => {\r\n                this.isRunning = false;\r\n            });\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * get table schema\r\n     */\r\n    @action\r\n    schema() {\r\n        let sql = \"show \" + this.table + \"/_doc/_mapping\";\r\n        return this.execute(sql).then(e => this._maps = e);\r\n    }\r\n\r\n\r\n    /**\r\n     * Show commands is just a wrapper for the mapping request.\r\n     But using it on the web interface give you information about what are the indices in your cluster, which types they contains and what is the mapping for each type.\r\n     The supported Commands:\r\n     1.Show * - shows all indices on cluster\r\n     on _sql?sql=show * you'll get all the mapping for all indices\r\n     on web interface you'll get a table of index to types image\r\n\r\n     2.Show myIndex - shows a specific index\r\n     on _sql?sql=show myIndex you'll get the mapping for this specific index\r\n     on web interface you'll get a table of type to fields for this specific index image\r\n\r\n     3.Show myIndex/myType - shows a specific type\r\n     on _sql?sql=show myIndex/myType you'll get the mapping for this specific type\r\n     on web interface you'll get a table of fields to mappings for this specific type\r\n     *\r\n     * @param index\r\n     * @returns {*}\r\n     */\r\n    @action\r\n    show(index = null) {\r\n        let sql = \"show \" + (index == null ? this.table : index);\r\n        return this.execute(sql).then(e => this._maps = e);\r\n    }\r\n\r\n}"],"file":"ElasticSql.js"}