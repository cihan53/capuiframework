{"version":3,"sources":["../../../../src/Lib/CAP/Store/BaseStore.js"],"names":["action","observable","toJS","values","Utils","Validator","DataProxy","BaseStore","struct","ref","_defaultConfig","baseParams","page","size","dir","desc","_Request","dataProxy","primaryKey","_scenario","_limit","_baseUrl","_Action","get","read","save","update","delete","_Rules","cacheUrl","_validator","showMessages","map","val","scenario","Object","assign","init","Request","createProxy","value","attr","Attributes","error","ValidateErrors","key","record","_data","set","abort","ErrorText","isLoading","totalCount","currentPage","clear","parameters","actionStatus","sort","newParameters","_parameters","status","id","_model","find","forEach","_value","_key","_map","push","params","setActionStatus","isEmpty","filter","JSON","stringify","setParameters","url","baseUrl","Action","Math","random","then","res","data","app","addRecord","catch","err","response","body","errors","finally","primaryKeyValue","isObject","isNewRecord","postType","post","update_","errorMessages","Rules","message","name","undefined","rule","console","log","bind","getErrorMessages","_isValid","allValid","obj","keys","Array","isArray","val2","encodeURIComponent","join","_actionStatus","_ValidateErrors","_ErrorText","Map"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2019. Crypttech Yazılım\r\n * Author: Cihan Öztürk\r\n * Email: cihanozturk@crypttech.com\r\n */\r\n\r\nimport {action, observable, toJS, values} from \"mobx\";\r\nimport Utils from \"../Utils/Utils\";\r\nimport Validator from \"../Utils/Validator\";\r\nimport DataProxy from \"../Data/DataProxy\";\r\n\r\n// import lodash from \"lodash\";\r\n\r\n// Load the core build.\r\n// var lodash = require(\"lodash/core\");\r\n\r\n/*\r\nrules = {\r\n    accepted       : {message: 'The :attribute must be accepted.',                              rule: (val) => val === true },\r\n    alpha          : {message: 'The :attribute may only contain letters.',                      rule: (val) => validator.helpers.testRegex(val,/^[A-Z]*$/i) },\r\n    alpha_num      : {message: 'The :attribute may only contain letters and numbers.',          rule: (val) => validator.helpers.testRegex(val,/^[A-Z0-9]*$/i) },\r\n    alpha_num_dash : {message: 'The :attribute may only contain letters, numbers, and dashes.', rule: (val) => validator.helpers.testRegex(val,/^[A-Z0-9_-.]*$/i) },\r\n    card_exp       : {message: 'The :attribute must be a valid expiration date.',               rule: (val) => validator.helpers.testRegex(val,/^(([0]?[1-9]{1})|([1]{1}[0-2]{1}))\\s?\\/\\s?(\\d{2}|\\d{4})$/) },\r\n    card_num       : {message: 'The :attribute must be a valid credit card number.',            rule: (val) => validator.helpers.testRegex(val,/^\\d{4}\\s?\\d{4,6}\\s?\\d{4,5}\\s?\\d{0,8}$/) },\r\n    email          : {message: 'The :attribute must be a valid email address.',                 rule: (val) => validator.helpers.testRegex(val,/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i) },\r\n    gt             : {message: 'The :attribute must be greater than :gt.',                      rule: (val, options) => validator.helpers.testRegex(val,/^\\d+.?\\d*$/) ? parseFloat(val) > parseFloat(options[0]) : false, messageReplace: (message, options) => message.replace(':gt', options[0]) },\r\n    gte            : {message: 'The :attribute must be greater than or equal to :gte.',         rule: (val, options) => validator.helpers.testRegex(val,/^\\d+.?\\d*$/) ? parseFloat(val) >= parseFloat(options[0]) : false, messageReplace: (message, options) => message.replace(':gte', options[0]) },\r\n    in             : {message: 'The selected :attribute must be :values.',                      rule: (val, options) => options.indexOf(val) > -1, messageReplace: (message, options) => message.replace(':values', this._toSentence(options)) },\r\n    integer        : {message: 'The :attribute must be an integer.',                            rule: (val) => validator.helpers.testRegex(val,/^\\d+$/)},\r\n    lt             : {message: 'The :attribute must be less than :lt.',                         rule: (val, options) => validator.helpers.testRegex(val,/^\\d+.?\\d*$/) ? parseFloat(val) < parseFloat(options[0]) : false, messageReplace: (message, options) => message.replace(':lt', options[0]) },\r\n    lte            : {message: 'The :attribute must be less than or equal to :lte.',            rule: (val, options) => validator.helpers.testRegex(val,/^\\d+.?\\d*$/) ? parseFloat(val) <= parseFloat(options[0]) : false, messageReplace: (message, options) => message.replace(':lte', options[0]) },\r\n    max            : {message: 'The :attribute may not be greater than :max characters.',       rule: (val, options) => val.length <= options[0], messageReplace: (message, options) => message.replace(':max', options[0]) },\r\n    min            : {message: 'The :attribute must be at least :min characters.',              rule: (val, options) => val.length >= options[0], messageReplace: (message, options) => message.replace(':min', options[0]) },\r\n    not_in         : {message: 'The selected :attribute must not be :values.',                  rule: (val, options) => options.indexOf(val) === -1, messageReplace: (message, options) => message.replace(':values', this._toSentence(options)) },\r\n    numeric        : {message: 'The :attribute must be a number.',                              rule: (val) => validator.helpers.testRegex(val,/^\\d+.?\\d*$/)},\r\n    phone          : {message: 'The :attribute must be a valid phone number.',                  rule: (val) => validator.helpers.testRegex(val,/(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)/)},\r\n    required       : {message: 'The :attribute field is required.',                             rule: (val) => validator.helpers.testRegex(val,/.+/) },\r\n    url            : {message: 'The :attribute must be a url.',                                 rule: (val) => validator.helpers.testRegex(val,/^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i) },\r\n    ...customRules,\r\n};\r\n*/\r\nexport default class BaseStore {\r\n    /**\r\n     *\r\n     * @type {{baseParams: {page: number, size: number, dir: string, desc: string}}}\r\n     * @private\r\n     */\r\n    _defaultConfig = {\r\n        baseParams: {\r\n            page: 0,\r\n            size: 50,\r\n            dir: \"id\",\r\n            desc: \"asc\"\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @type {{postMultiPart: (function(*, *=): *), postJson: (function(*, *=): *), post: _Request.post, get: (function(*, *=): *), del: (function(*): *), deadline: number, postForm: (function(*, *=): *), timeout: number, put: (function(*, *=): *)}}\r\n     */\r\n    _Request = {}\r\n\r\n    dataProxy = new DataProxy();\r\n\r\n\r\n    /**\r\n     * Request parameters\r\n     * @type {{page: number, size: number, dir: string, desc: string}}\r\n     */\r\n    @observable _parameters = Object.assign({}, this._defaultConfig.baseParams);\r\n\r\n\r\n    /**\r\n     *\r\n     * @type {Map<any, any>}\r\n     */\r\n    @observable.struct _model = new Map();\r\n\r\n    /**\r\n     * Primary key\r\n     * @url parameter\r\n     * @type {string}\r\n     */\r\n    primaryKey = \"id\";\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    _scenario = \"default\";\r\n    /**\r\n     * Page size Limit\r\n     * @type {number}\r\n     */\r\n    _limit = 20;\r\n    /**\r\n     * Ajax Request Base URL\r\n     * @type {string}\r\n     */\r\n    _baseUrl = \"\";\r\n    /**\r\n     * Rest api action type\r\n     * @type {{get: string, read: string, save: string, update: string, delete: string}}\r\n     */\r\n    _Action = {\r\n        get: \"get\",\r\n        read: \"read\",\r\n        save: \"save\",\r\n        update: \"update\",\r\n        delete: \"delete\"\r\n    };\r\n\r\n    /**\r\n     * Ajax request status\r\n     * @type {{read: boolean, save: boolean, update: boolean, delete: boolean}}\r\n     */\r\n    @observable.ref _actionStatus = new Map()\r\n        .set(\"get\", false)\r\n        .set(\"read\", false)\r\n        .set(\"load\", false)\r\n        .set(\"save\", false)\r\n        .set(\"update\", false)\r\n        .set(\"delete\", false);\r\n\r\n\r\n    /**\r\n     * Attributes validation rules\r\n     * @type {Array}\r\n     */\r\n    _Rules = [];\r\n    /**\r\n     * Attributes\r\n     * @type {Array}\r\n     */\r\n    @observable Attributes = {};\r\n\r\n\r\n    /**\r\n     * Cache URL\r\n     */\r\n    cacheUrl = false;\r\n\r\n    /**\r\n     *\r\n     * @type {Map<any, any>}\r\n     * @private\r\n     */\r\n    @observable _data = new Map();\r\n\r\n    /**\r\n     * Record TotalCount\r\n     * @type {number}\r\n     */\r\n    @observable totalCount = 0;\r\n    /**\r\n     * Aktif sayfa\r\n     * @type {number}\r\n     */\r\n    @observable currentPage = 1;\r\n\r\n\r\n    _validator = Validator;\r\n    /**\r\n     * errors\r\n     */\r\n    @observable _ValidateErrors = {};\r\n\r\n    /**\r\n     * isValid\r\n     */\r\n    @observable _isValid = false;\r\n\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    @observable _ErrorText = \"\";\r\n\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        this._validator.showMessages();\r\n        this._Rules = this._Rules.map(function (val) {\r\n            if (!val.scenario) val = Object.assign(val, {scenario: \"default\"});\r\n            return val;\r\n        });\r\n\r\n\r\n        this.init();\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     */\r\n    init() {\r\n        this.Request = this.dataProxy.createProxy('ajax');\r\n    }\r\n\r\n\r\n    get Request() {\r\n        return this._Request;\r\n    }\r\n\r\n    set Request(value) {\r\n        this._Request = value;\r\n    }\r\n\r\n    get scenario() {\r\n        return this._scenario;\r\n    }\r\n\r\n    set scenario(value) {\r\n        this._scenario = value;\r\n    }\r\n\r\n\r\n    setScenario(value) {\r\n        this._scenario = value;\r\n    }\r\n\r\n\r\n    get limit() {\r\n        return this._limit;\r\n    }\r\n\r\n    set limit(value) {\r\n        this._limit = value;\r\n    }\r\n\r\n    get baseUrl() {\r\n        return this._baseUrl;\r\n    }\r\n\r\n    set baseUrl(value) {\r\n        this._baseUrl = value;\r\n    }\r\n\r\n    get Action() {\r\n        return this._Action;\r\n    }\r\n\r\n    set Action(value) {\r\n        this._Action = value;\r\n    }\r\n\r\n    get Rules() {\r\n        return this._Rules;\r\n    }\r\n\r\n    set Rules(value) {\r\n        this._Rules = value;\r\n    }\r\n\r\n\r\n    @action getAttr(attr) {\r\n        return this.Attributes[attr] || null\r\n    }\r\n\r\n    @action setAttr(attr, value) {\r\n        this.Attributes[attr] = value;\r\n    }\r\n\r\n\r\n    get data() {\r\n        return toJS(values(this._data));\r\n    }\r\n\r\n    set data(value) {\r\n        this._data = value;\r\n    }\r\n\r\n\r\n    get model() {\r\n        return toJS(values(this._model));\r\n    }\r\n\r\n    set model(value) {\r\n        this._model = value;\r\n    }\r\n\r\n    get actionStatus() {\r\n        return this._actionStatus;\r\n    }\r\n\r\n    set actionStatus(value) {\r\n        this._actionStatus = value;\r\n    }\r\n\r\n\r\n    get validator() {\r\n        return this._validator;\r\n    }\r\n\r\n    set validator(value) {\r\n        this._validator = value;\r\n    }\r\n\r\n    get ValidateErrors() {\r\n        return toJS(this._ValidateErrors);\r\n    }\r\n\r\n    set ValidateErrors(value) {\r\n        this._ValidateErrors = value;\r\n    }\r\n\r\n\r\n    get isValid() {\r\n        return this._isValid;\r\n    }\r\n\r\n    set isValid(value) {\r\n        this._isValid = value;\r\n    }\r\n\r\n    get errors() {\r\n        return this.ValidateErrors;\r\n    }\r\n\r\n    get ErrorText() {\r\n        return this._ErrorText;\r\n    }\r\n\r\n    set ErrorText(value) {\r\n        this._ErrorText = value;\r\n    }\r\n\r\n\r\n    get defaultConfig() {\r\n        return this._defaultConfig;\r\n    }\r\n\r\n    set defaultConfig(value) {\r\n        this._defaultConfig = value;\r\n    }\r\n\r\n\r\n    get parameters() {\r\n        return toJS(this._parameters);\r\n    }\r\n\r\n    set parameters(value) {\r\n        this._parameters = value;\r\n    }\r\n\r\n    addError(error) {\r\n        this.ValidateErrors = Object.assign(this.ValidateErrors, error);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param record\r\n     */\r\n    @action\r\n    addRecord(key, record) {\r\n        this._data.set(key, record);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     */\r\n    removeRecord(key) {\r\n        this._data.delete(key);\r\n    }\r\n\r\n\r\n    @action abort() {\r\n\r\n        this._Request.abort()\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    @action reset() {\r\n        this.ErrorText = \"\";\r\n        this.ValidateErrors = [];\r\n        this.isLoading = false;\r\n        this.page = 0;\r\n        this.totalCount = 0;\r\n        this.currentPage = 0;\r\n        this._data.clear();\r\n        this.parameters = {\r\n            page: 0,\r\n            size: 50,\r\n            dir: \"id\",\r\n            desc: \"asc\"\r\n        };\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    @action clear() {\r\n        this._data.clear();\r\n        this.ErrorText = \"\";\r\n        this.ValidateErrors = [];\r\n        this.isLoading = false;\r\n        this.page = 0;\r\n        this.totalCount = 0;\r\n        this.currentPage = 0;\r\n\r\n        this.actionStatus\r\n            .set(\"get\", false)\r\n            .set(\"read\", false)\r\n            .set(\"load\", false)\r\n            .set(\"save\", false)\r\n            .set(\"update\", false)\r\n            .set(\"delete\", false);\r\n\r\n        //this.parameters = Object.assign({}, this._defaultConfig.baseParams);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param dir\r\n     * @param sort\r\n     */\r\n    setDefaultSortDir(dir, sort = \"ASC\") {\r\n        this._defaultConfig.baseParams.dir = dir;\r\n        this._defaultConfig.baseParams.sort = sort;\r\n    }\r\n\r\n\r\n    /**\r\n     * Base Request Parameters Set\r\n     * @param newParameters\r\n     */\r\n    @action setParameters(newParameters = {}) {\r\n        this._parameters = Object.assign(this.parameters, newParameters);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param action\r\n     * @param status\r\n     */\r\n    @action getActionStatus(action) {\r\n        this.actionStatus.get(action);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param action\r\n     * @param status\r\n     */\r\n    @action setActionStatus(action, status) {\r\n        this.actionStatus.set(action, status);\r\n    }\r\n\r\n    //region data filter\r\n    /**\r\n     *\r\n     * @param id\r\n     * @returns {any | undefined}\r\n     */\r\n    findById(id) {\r\n        return this._data.get(id);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param id\r\n     * @returns {any | undefined}\r\n     */\r\n    find(id) {\r\n        return this._data.get(id);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param id\r\n     * @returns {any | undefined}\r\n     */\r\n    findByModel(id) {\r\n        return this._model.get(id);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param value\r\n     * @returns {*}\r\n     */\r\n    findByField(key, value) {\r\n        let find = [];\r\n\r\n        this._data.forEach((_value, _key, _map) => {\r\n            if (_value[key] == value) find.push(_value);\r\n        });\r\n\r\n        return find;\r\n    }\r\n\r\n    //regionend\r\n\r\n\r\n    /**\r\n     * load\r\n     */\r\n    @action\r\n    load(params = {}) {\r\n\r\n        /**\r\n         * clear request data\r\n         */\r\n        this.clear();\r\n\r\n        /**\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.setActionStatus(\"read\", true)\r\n        this.setActionStatus(\"load\", true)\r\n\r\n        /**\r\n         * Run Ajax Request\r\n         */\r\n\r\n        if (!Utils.isEmpty(params)) {\r\n            //filter parametresi json ceviriliyor.\r\n            if (params.filter) params.filter = JSON.stringify(params.filter);\r\n            this.setParameters(params);\r\n        }\r\n\r\n        // console.debug(\"Store Base Params :\", this.parameters);\r\n\r\n        /**\r\n         *\r\n         * @type {string}\r\n         */\r\n        let url = this.baseUrl + this.Action.read + \"?\" + this.stringify(this.parameters);\r\n\r\n        if (!this.cacheUrl) url = url + \"&rnd=\" + Math.random();\r\n\r\n\r\n        return this._Request.get(url)\r\n            .then(action((res) => {\r\n\r\n                if (res) {\r\n                    res.data.forEach(app => {\r\n                        this.addRecord(app[this.primaryKey], app);\r\n                    });\r\n                    this.totalCount = res.totalCount;\r\n                } else {\r\n                    //throw new Error(\"Data Error: Data\");\r\n                }\r\n\r\n\r\n                return res;\r\n            }))\r\n            .catch(action((err) => {\r\n\r\n                this.ErrorText = err.response && err.response.body && err.response.body.errors;\r\n                throw err;\r\n            }))\r\n            .finally(action(() => {\r\n                this.setActionStatus(\"read\", false)\r\n                this.setActionStatus(\"load\", false)\r\n\r\n\r\n            }));\r\n    }\r\n\r\n\r\n    /**\r\n     * get record detail\r\n     * @param primaryKeyValue\r\n     * @returns {*|Promise<any>|Promise<T>}\r\n     */\r\n    get(primaryKeyValue, primaryKey = this.primaryKey) {\r\n\r\n        /**\r\n         * Set action status\r\n         */\r\n        this.actionStatus.get = true;\r\n\r\n        let url = this.baseUrl + this.Action.get;\r\n        let params = {};\r\n        if (!(primaryKeyValue == false || primaryKeyValue == null)) {\r\n            if (Utils.isObject(primaryKey)) {\r\n                params = primaryKey;\r\n            } else {\r\n                params[primaryKey] = primaryKeyValue;\r\n            }\r\n        }\r\n        // let url = primaryKeyValue != null ? this.baseUrl + this.Action.get + \"?\" + primaryKey + \"=\" + primaryKeyValue : this.baseUrl + this.Action.get;\r\n\r\n\r\n        return this._Request.get(url, params)\r\n            .then(action((res) => {\r\n                this._model.set(primaryKeyValue, res);\r\n                return res;\r\n            }))\r\n            .catch(action((err) => {\r\n                this.ErrorText = err.response && err.response.body && err.response.body.errors;\r\n                throw err;\r\n            }))\r\n            .finally(action(() => {\r\n                this.actionStatus.get = false;\r\n            }));\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Record Save\r\n     * @param params\r\n     * @param isNewRecord\r\n     * @returns {*|Promise<any>|Promise<T>}\r\n     */\r\n    @action save(params, isNewRecord = true, postType = \"json\") {\r\n        /**\r\n         * Set action status\r\n         */\r\n        this.actionStatus.save = true;\r\n\r\n        return this._Request.post(this.baseUrl + this.Action.save, params, postType)\r\n            .then(action((res) => {\r\n                return res;\r\n            }))\r\n            .catch(action((err) => {\r\n                this.ErrorText = err.response && err.response.body && err.response.body.errors;\r\n                throw err;\r\n            }))\r\n            .finally(action(() => {\r\n                /**\r\n                 * Set action status\r\n                 */\r\n                this.actionStatus.save = true;\r\n            }));\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     *  Record Update\r\n     * @param params\r\n     * @param isNewRecord\r\n     * @returns {*|Promise<any>|Promise<T>}\r\n     */\r\n    @action update(params, postType = \"json\") {\r\n\r\n        /**\r\n         * Set action status\r\n         */\r\n        this.actionStatus.update_ = true;\r\n        return this._Request.post(this.baseUrl + this.Action.update, params, postType)\r\n            .then(action((res) => {\r\n                return res;\r\n            }))\r\n            .catch(action((err) => {\r\n                this.ErrorText = err.response && err.response.body && err.response.body.errors;\r\n                throw err;\r\n            }))\r\n            .finally(action(() => {\r\n                /**\r\n                 * Set action status\r\n                 */\r\n                this.actionStatus.update_ = false;\r\n            }));\r\n\r\n    }\r\n\r\n    /**\r\n     * Record Delete\r\n     * @param params\r\n     * @returns {*|Promise<any>|Promise<T>}\r\n     */\r\n    @action delete(params, postType = \"formdata\") {\r\n        /**\r\n         * Set action status\r\n         */\r\n        this.actionStatus.delete = false;\r\n\r\n        return this._Request.post(this.baseUrl + this.Action.delete, params, postType)\r\n            .then(action((res) => {\r\n                return res;\r\n            }))\r\n            .catch(action((err) => {\r\n                this.ErrorText = err.response && err.response.body && err.response.body.errors;\r\n                throw err;\r\n            }))\r\n            .finally(action(() => {\r\n                /**\r\n                 * Set action status\r\n                 */\r\n                this.actionStatus.delete = true;\r\n            }));\r\n    }\r\n\r\n\r\n    //region validate\r\n\r\n    /**\r\n     * Record Validation\r\n     * Save and Update Data validate\r\n     */\r\n    @action validate(data, scenario = this._scenario) {\r\n\r\n        this.ValidateErrors = [];\r\n        this._validator.errorMessages = {};\r\n\r\n        this.Rules.forEach(function (val) {\r\n\r\n\r\n            if (val.scenario == scenario) {\r\n                // this._validator.message(val.name, Utils.has(data, val.name) ? data[val.name] : \"\", val.rule, false, val.msg);\r\n                this._validator.message(val.name, data[val.name] !== undefined ? data[val.name] : \"\", val.rule, {message: val.message});\r\n            } else if (val.scenario == \"default\" && scenario == \"default\") {\r\n                console.log(val, scenario);\r\n                this._validator.message(val.name, data[val.name] !== undefined ? data[val.name] : \"\", val.rule, {message: val.message});\r\n                // this._validator.message(val.name, Utils.has(data, val.name) ? data[val.name] : \"\", val.rule, false, val.msg);\r\n            }\r\n        }.bind(this));\r\n\r\n\r\n        this.ValidateErrors = this._validator.getErrorMessages();\r\n\r\n        this._isValid = this._validator.allValid();\r\n        return this._isValid;\r\n\r\n    }\r\n\r\n    //endregion\r\n\r\n\r\n    //region util\r\n\r\n    /**\r\n     * object to urlParams\r\n     * @param obj\r\n     * @returns {string}\r\n     */\r\n    stringify(obj) {\r\n        return obj ? Object.keys(obj).map(function (key) {\r\n            var val = obj[key];\r\n            if (Array.isArray(val)) {\r\n                return val.map(function (val2) {\r\n                    return encodeURIComponent(key) + \"=\" + encodeURIComponent(val2);\r\n                }).join(\"&\");\r\n            } else if (val instanceof Object) {\r\n                return encodeURIComponent(key) + \"=\" + JSON.stringify(val);\r\n            }\r\n            return encodeURIComponent(key) + \"=\" + encodeURIComponent(val);\r\n        }.bind(this)).join(\"&\") : \"\";\r\n    }\r\n\r\n\r\n    //region\r\n}"],"file":"BaseStore.js"}